{
  "env": {
    // An environment defines global variables that are predefined
    "browser": true, // Browser global variables.
    "es2021": true, // Adds all ECMAScript 2021 globals and automatically sets the ecmaVersion parser option to 12.
    "node": true, // Node.js global variables and Node.js scoping.
    "jest": true // Jest global variables.
  },
  "extends": [
    "eslint:recommended", // Enables a subset of core rules that report common problems
    "plugin:promise/recommended", // Enforce best practices for JavaScript promises
    "plugin:react/recommended", // Uses the recommended rules from @eslint-plugin-react
    "plugin:@typescript-eslint/recommended", // Uses the recommended rules from the @typescript-eslint/eslint-plugin
    "plugin:prettier/recommended", // Enables eslint-plugin-prettier and displays prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array
    "plugin:react-hooks/recommended" // Enforces the Rules of Hooks.
  ],
  "parser": "@typescript-eslint/parser", // Specifies the ESLint parser
  "plugins": ["react", "@typescript-eslint", "promise"],
  "settings": {
    "react": {
      "version": "detect" // Tells eslint-plugin-react to automatically detect the version of React to use
    }
  },
  "ignorePatterns": [".idea", "node_modules", "public", "**/*.js"],
  "rules": {
    "no-warning-comments": "warn", // Disallow specified warning terms in comments (TODO)
    "max-classes-per-file": ["error", 1], // Enforce a maximum number of classes per file
    "camelcase": "error", // Enforce camelcase naming convention
    "no-eq-null": "error", // Disallow `null` comparisons without type-checking operators
    "no-undefined": "error", // Disallow the use of `undefined` as an identifier
    "prefer-template": "error", // Require template literals instead of string concatenation
    "func-names": "error", // Require or disallow named `function` expressions
    "object-shorthand": "error", // Require or disallow method and property shorthand syntax for object literals
    "prefer-promise-reject-errors": "error", // Require using Error objects as Promise rejection reasons
    "no-return-await": "error", // Disallow unnecessary `return await`
    "operator-assignment": "error", // Require or disallow assignment operator shorthand where possible
    "no-duplicate-imports": "error", // Disallow duplicate module imports
    "prefer-object-spread": "error", // Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead
    "no-template-curly-in-string": "error", // Disallow template literal placeholder syntax in regular strings
    "no-unreachable-loop": "error", // Disallow loops with a body that allows only one iteration
    "array-callback-return": "error", // Enforce `return` statements in callbacks of array methods
    "default-case-last": "error", // Enforce default clauses in switch statements to be last
    "no-case-declarations": "error", // Disallow lexical declarations in case clauses
    "no-constructor-return": "error", // Disallow returning value from constructor
    "no-new-wrappers": "error", // Disallow `new` operators with the `String`, `Number`, and `Boolean` objects
    "no-throw-literal": "error", // Disallow throwing literals as exceptions
    "no-useless-return": "error", // Disallow redundant return statements
    "no-lonely-if": "error", // Disallow `if` statements as the only statement in `else` blocks
    "no-unneeded-ternary": "error", // Disallow ternary operators when simpler alternatives exist
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn", // Verifies the list of dependencies for Hooks like useEffect, useLayoutEffect, useMemo, useCallback, useImperativeHandle and similar, protecting against the stale closure pitfalls
    "prettier/prettier": [
      "error",
      {
        "printWidth": 120, // Specify the line length that the printer will wrap on.
        "bracketSpacing": false, // Print spaces between brackets in object literals.
        "arrowParens": "avoid", // Include parentheses around a sole arrow function parameter.
        "endOfLine": "auto" // Maintain existing line endings (it is better to set core.autocrlf=true to git config on Windows)
      }
    ]
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "no-restricted-syntax": [
          "warn",
          {
            "selector": "FunctionDeclaration", // Force to use class syntax instead of function declaration in typescript file
            "message": "Please use ES5 class syntax instead of function"
          }
        ]
      }
    }
  ]
}